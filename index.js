// Generated by CoffeeScript 1.6.3
(function() {
  var DEFAULT_MESSAGE_TIMEOUT, DEFAULT_WORKERS, DEFAULT_WORKER_ITERATIONS, DEFAULT_WORKER_PARALLELISM, PhantomClusterClient, PhantomClusterServer, PhantomQueuedClusterClient, PhantomQueuedClusterServer, QueueItem, STOP_QUEUE_CHECKING_INTERVAL, cluster, create, createQueued, empty, events, os, phantom,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  phantom = require("phantom");

  cluster = require("cluster");

  events = require("events");

  os = require("os");

  DEFAULT_WORKER_ITERATIONS = 100;

  DEFAULT_WORKER_PARALLELISM = 2;

  STOP_QUEUE_CHECKING_INTERVAL = 10;

  DEFAULT_MESSAGE_TIMEOUT = 60 * 1000;

  DEFAULT_WORKERS = os.cpus().length;

  empty = function(obj) {
    var key;
    for (key in obj) {
      return false;
    }
    return true;
  };

  create = function(options) {
    if (cluster.isMaster) {
      return new PhantomClusterServer(options || {});
    } else {
      return new PhantomClusterClient(options || {});
    }
  };

  createQueued = function(options) {
    if (cluster.isMaster) {
      return new PhantomQueuedClusterServer(options || {});
    } else {
      return new PhantomQueuedClusterClient(options || {});
    }
  };

  PhantomClusterServer = (function(_super) {
    __extends(PhantomClusterServer, _super);

    function PhantomClusterServer(options) {
      PhantomClusterServer.__super__.constructor.apply(this, arguments);
      options = options || {};
      this.numWorkers = options.workers || DEFAULT_WORKERS;
      this.workers = {};
      this.done = false;
    }

    PhantomClusterServer.prototype.addWorker = function() {
      var worker;
      worker = cluster.fork();
      this.workers[worker.id] = worker;
      return this.emit("workerStarted", worker);
    };

    PhantomClusterServer.prototype.start = function() {
      var i, _i, _ref,
        _this = this;
      cluster.on("exit", function(worker, code, signal) {
        _this.emit("workerDied", worker, code, signal);
        delete _this.workers[worker.id];
        if (!_this.done) {
          return _this.addWorker();
        }
      });
      for (i = _i = 0, _ref = this.numWorkers; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        this.addWorker();
      }
      return this.emit("started");
    };

    PhantomClusterServer.prototype.stop = function() {
      var worker, _, _ref;
      if (!this.done) {
        this.done = true;
        _ref = this.workers;
        for (_ in _ref) {
          worker = _ref[_];
          worker.kill();
        }
        return this.emit("stopped");
      }
    };

    return PhantomClusterServer;

  })(events.EventEmitter);

  PhantomClusterClient = (function(_super) {
    __extends(PhantomClusterClient, _super);

    function PhantomClusterClient(options) {
      PhantomClusterClient.__super__.constructor.apply(this, arguments);
      options = options || {};
      this.ph = null;
      this.iterations = options.workerIterations || DEFAULT_WORKER_ITERATIONS;
      this.parallelism = options.workerParallelism || DEFAULT_WORKER_PARALLELISM;
      this.phantomArguments = options.phantomArguments || [];
      this.phantomBinary = options.phantomBinary || require("phantomjs").path;
      this.phantomBasePort = options.phantomBasePort || 12300;
      this.pendingRequestCount = 0;
      this.done = false;
    }

    PhantomClusterClient.prototype.start = function() {
      var onStart, options,
        _this = this;
      options = {
        binary: this.phantomBinary,
        port: this.phantomBasePort + cluster.worker.id + 1,
        onExit: function() {
          _this.emit("phantomDied");
          return _this.stop();
        }
      };
      onStart = function(ph) {
        var i, _i, _ref, _results;
        _this.ph = ph;
        _this.emit("phantomStarted");
        _results = [];
        for (i = _i = 0, _ref = _this.parallelism; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          _results.push(_this.next());
        }
        return _results;
      };
      phantom.create.apply(phantom, this.phantomArguments.concat([options, onStart]));
      return this.emit("started");
    };

    PhantomClusterClient.prototype.next = function() {
      if (!this.done) {
        if (this.iterations > 0) {
          this.iterations--;
          this.pendingRequestCount++;
          return this.emit("workerReady");
        } else if (this.pendingRequestCount <= 0) {
          return this.stop();
        }
      }
    };

    PhantomClusterClient.prototype.stop = function() {
      if (!this.done) {
        this.done = true;
        this.emit("stopped");
        return process.nextTick(function() {
          return process.exit(0);
        });
      }
    };

    return PhantomClusterClient;

  })(events.EventEmitter);

  PhantomQueuedClusterServer = (function(_super) {
    __extends(PhantomQueuedClusterServer, _super);

    function PhantomQueuedClusterServer(options) {
      this._onWorkerStarted = __bind(this._onWorkerStarted, this);
      options = options || {};
      PhantomQueuedClusterServer.__super__.constructor.call(this, options);
      this.messageTimeout = options.messageTimeout || DEFAULT_MESSAGE_TIMEOUT;
      this._sentMessages = {};
      this._messageIdCounter = 0;
      this.queue = [];
      this.clientsQueue = [];
      this.on("workerStarted", this._onWorkerStarted);
    }

    PhantomQueuedClusterServer.prototype.enqueue = function(request) {
      var item, sent,
        _this = this;
      item = new QueueItem(this._messageIdCounter++, request);
      item.on("timeout", function() {
        return delete _this._sentMessages[item.id];
      });
      sent = false;
      while (this.clientsQueue.length > 0 && !sent) {
        sent = this._sendQueueItemRequest(this.clientsQueue.shift(), item);
      }
      if (!sent) {
        this.queue.push(item);
      }
      return item;
    };

    PhantomQueuedClusterServer.prototype._onWorkerStarted = function(worker) {
      var _this = this;
      return worker.on("message", function(json) {
        var item, sent;
        if (json.action === "queueItemRequest") {
          if (_this.queue.length > 0) {
            item = _this.queue.shift();
            sent = _this._sendQueueItemRequest(worker, item);
            if (!sent) {
              return _this.enqueue(item.request);
            }
          } else {
            return _this.clientsQueue.push(worker);
          }
        } else if (json.action === "queueItemResponse") {
          item = _this._sentMessages[json.id];
          if (item) {
            item.finish(json.response);
            delete _this._sentMessages[json.id];
            return worker.send({
              action: "OK"
            });
          } else {
            return worker.send({
              action: "ignored"
            });
          }
        }
      });
    };

    PhantomQueuedClusterServer.prototype._sendQueueItemRequest = function(worker, item) {
      try {
        worker.send({
          action: "queueItemRequest",
          id: item.id,
          request: item.request
        });
      } catch (_error) {
        return false;
      }
      item.start(this.messageTimeout);
      this._sentMessages[item.id] = item;
      return true;
    };

    return PhantomQueuedClusterServer;

  })(PhantomClusterServer);

  PhantomQueuedClusterClient = (function(_super) {
    __extends(PhantomQueuedClusterClient, _super);

    function PhantomQueuedClusterClient(options) {
      this._onWorkerReady = __bind(this._onWorkerReady, this);
      this._onPageReady = __bind(this._onPageReady, this);
      this._onMessage = __bind(this._onMessage, this);
      options = options || {};
      PhantomQueuedClusterClient.__super__.constructor.call(this, options);
      this.messageTimeout = options.messageTimeout || DEFAULT_MESSAGE_TIMEOUT;
      this.itemsQueue = [];
      this.pagesQueue = [];
      this.on("workerReady", this._onWorkerReady);
      process.on("message", this._onMessage);
    }

    PhantomQueuedClusterClient.prototype._onMessage = function(json) {
      var item, _ref,
        _this = this;
      if (json.action === "queueItemRequest") {
        item = new QueueItem(json.id, json.request);
        item.on("response", function() {
          process.send({
            action: "queueItemResponse",
            id: item.id,
            response: item.response
          });
          return _this.next();
        });
        item.start(this.messageTimeout);
        this.itemsQueue.push(item);
        return this._checkReadiness();
      } else if (json.action === "queueItemResponse") {
        if ((_ref = json.status) !== "OK" && _ref !== "ignored") {
          throw new Error("Unexpected status code from queueItemResponse message: " + json.status);
        }
      }
    };

    PhantomQueuedClusterClient.prototype._onPageReady = function(page) {
      this.pagesQueue.push(page);
      return this._checkReadiness();
    };

    PhantomQueuedClusterClient.prototype._onWorkerReady = function() {
      process.send({
        action: "queueItemRequest"
      });
      return this.ph.createPage(this._onPageReady);
    };

    PhantomQueuedClusterClient.prototype._checkReadiness = function() {
      if (this.itemsQueue.length > 0 && this.pagesQueue.length > 0) {
        return this.emit("request", this.pagesQueue.shift(), this.itemsQueue.shift());
      }
    };

    return PhantomQueuedClusterClient;

  })(PhantomClusterClient);

  QueueItem = (function(_super) {
    __extends(QueueItem, _super);

    function QueueItem(id, request) {
      this._onTimeout = __bind(this._onTimeout, this);
      this.id = id;
      this.request = request;
      this.response = null;
      this.timeout = null;
      this.state = 0;
    }

    QueueItem.prototype.start = function(timeout) {
      if (this.state !== 0) {
        throw new Error("Bad QueueItem state");
      }
      this.state = 1;
      return this.timeout = setTimeout(this._onTimeout, timeout);
    };

    QueueItem.prototype.finish = function(response) {
      if (this.state !== 1) {
        throw new Error("Bad QueueItem state");
      }
      clearTimeout(this.timeout);
      this.timeout = null;
      this.response = response;
      this.state = 2;
      return this.emit("response");
    };

    QueueItem.prototype._onTimeout = function() {
      return this.emit("timeout");
    };

    return QueueItem;

  })(events.EventEmitter);

  exports.create = create;

  exports.createQueued = createQueued;

  exports.PhantomClusterServer = PhantomClusterServer;

  exports.PhantomClusterClient = PhantomClusterClient;

  exports.PhantomQueuedClusterServer = PhantomQueuedClusterServer;

  exports.PhantomQueuedClusterClient = PhantomQueuedClusterClient;

  exports.QueueItem = QueueItem;

}).call(this);
